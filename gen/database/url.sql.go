// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: url.sql

package database

import (
	"context"
)

const createUrl = `-- name: CreateUrl :one
INSERT INTO urls (token, url, created_at, expires_at, is_active)
VALUES (MD5($1), $1, NOW(), NOW() + INTERVAL '7 day', TRUE)
RETURNING token
`

func (q *Queries) CreateUrl(ctx context.Context, url string) (string, error) {
	row := q.db.QueryRowContext(ctx, createUrl, url)
	var token string
	err := row.Scan(&token)
	return token, err
}

const createUrlWithExpire = `-- name: CreateUrlWithExpire :one
INSERT INTO urls (token, url, created_at, expires_at, is_active)
VALUES (MD5($1), $1, NOW(), NOW() + INTERVAL $2, TRUE)
RETURNING token
`

type CreateUrlWithExpireParams struct {
	Url     string
	Column2 int64
}

func (q *Queries) CreateUrlWithExpire(ctx context.Context, arg CreateUrlWithExpireParams) (string, error) {
	row := q.db.QueryRowContext(ctx, createUrlWithExpire, arg.Url, arg.Column2)
	var token string
	err := row.Scan(&token)
	return token, err
}

const getUrlByToken = `-- name: GetUrlByToken :one
SELECT Url FROM urls WHERE token = $1
`

func (q *Queries) GetUrlByToken(ctx context.Context, token string) (string, error) {
	row := q.db.QueryRowContext(ctx, getUrlByToken, token)
	var url string
	err := row.Scan(&url)
	return url, err
}

const getUrlTokenByUrl = `-- name: GetUrlTokenByUrl :one
SELECT token FROM urls WHERE url = $1
`

func (q *Queries) GetUrlTokenByUrl(ctx context.Context, url string) (string, error) {
	row := q.db.QueryRowContext(ctx, getUrlTokenByUrl, url)
	var token string
	err := row.Scan(&token)
	return token, err
}
