// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: users.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, created_at, first_name, last_name, api_key)
VALUES ($1, $2, $3, $4, encode(sha256(random()::text::bytea), 'hex'))
RETURNING api_key
`

type CreateUserParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	FirstName string
	LastName  string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (string, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.CreatedAt,
		arg.FirstName,
		arg.LastName,
	)
	var api_key string
	err := row.Scan(&api_key)
	return api_key, err
}

const getUserByAPIKey = `-- name: GetUserByAPIKey :one
SELECT id, created_at, first_name, last_name, api_key FROM users WHERE api_key = $1
`

func (q *Queries) GetUserByAPIKey(ctx context.Context, apiKey string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByAPIKey, apiKey)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.FirstName,
		&i.LastName,
		&i.ApiKey,
	)
	return i, err
}
